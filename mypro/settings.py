"""
Django settings for mypro project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import ast
import os
import warnings
from django.utils.crypto import get_random_string


from dotenv import load_dotenv
load_dotenv()




def get_random_key():
    chars='abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
    get_random_string(50,chars)


# def get_bool_form_env(name,default_value):
#     if name in os.environ:
#         value=os.environ[name]
#         try:
#             return ast.literal_eval(value)
#         except ValueError as e:
#             raise ValueError("{} is an invalid for {}".format(value,name)) from e
#     return default_value



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

DEBUG=bool(os.environ.get("DEBUG", False))

SECRET_KEY=os.environ.get('SECRET_KEY')

if not SECRET_KEY and DEBUG:
    warnings.warn('Secret key is not configured,Use a random temporary key')
    SECRET_KEY=get_random_key()


# SECRET_KEY = 'django-insecure-0r-9z87iq!$ts*p2ihzn158wj$-@g0ue%*65rt1h5%#9=(4ya7'
# DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS=[
    'apps.myapp',
]

THIRD_PARTY_APPS=[
    'rest_framework',
    # 'guardian',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'psycopg2',

]

INSTALLED_APPS=INSTALLED_APPS+LOCAL_APPS+THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mypro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mypro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'aventus1',  # Name of your PostgreSQL database
        'USER': 'postgres',  # Username for accessing the PostgreSQL database
        'PASSWORD': '123',  # Password for accessing the PostgreSQL database
        'HOST': 'localhost',  # Host where PostgreSQL is running. Change if your database is hosted elsewhere.
        'PORT': '5432',  # Default PostgreSQL port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

MEDAI_URL='/media/'
MEDIA_ROOT=os.path.join(BASE_DIR/'media/')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',  # Default Django authentication backend
#     'guardian.backends.ObjectPermissionBackend',  # django-guardian authentication backend
# )


# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
# }



'''This line is importent line, if its not uploaded in settings, 
it will not verify authentication function and return None,
if you add this it's might make a issue in django admin
u nee to add this line before creating superuser other wise it will store in other db'''

AUTH_USER_MODEL = 'myapp.Users' 
